/*
//Tang, Chen
//Jan 17 2019
 * AnalyzeSurvey form
 * This form allows users to select a form to analyze.
 * Users select a survey from a combo box of survey names,
 * and press "Analyze" to begin processing the survey.
 * Users can also press "Back" to return to the main menu
 */
package finalproject.tang.chen;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class AnalyzeSurvey extends javax.swing.JFrame {

    Welcome firstWindow;
    private AnalyzeSurveyResponse analyzeSurveyWindow;
    private Survey survey;
    private ArrayList<String> questionTypeOrder;
    private String surveyName;

    /**
     * Creates new form AnalyzeSurvey
     *
     * @param m - the parent form (main menu)
     */
    public AnalyzeSurvey(Welcome m) {
        initComponents();

        //Sets the first form (parent form) as the main menu
        firstWindow = m;

        //Changes the background to a light blue
        getContentPane().setBackground(new Color(153, 204, 255));

        try {
            //Sets the reader to read the file with all the survey names contained
            FileReader fr = new FileReader("src\\finalproject\\tang\\chen\\SurveyStorage");
            BufferedReader br = new BufferedReader(fr);

            //The end of the file has not been reached
            boolean eof = false;

            String surveyNameRead;

            //While the end of the file has not been reached
            while (!eof) {

                //Read a line of the file of the survey names
                surveyNameRead = br.readLine();

                //If the line read contains nothing, the end of the file is reached
                if (surveyNameRead == null) {

                    //The end of the file is reached, and the read can be terminated
                    eof = true;

                } else {

                    //If the line contains a survey name, add the name to the combo bos for the user to be able to select it
                    cboSurvey.addItem(surveyNameRead);

                }
            }
        } catch (IOException z) {
            System.out.println("ERROR " + z);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblWelcome = new javax.swing.JLabel();
        cboSurvey = new javax.swing.JComboBox();
        btnSelectAnalyze = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analyze Survey");

        btnBack.setBackground(new java.awt.Color(255, 212, 26));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblWelcome.setText("WELCOME! WHICH SURVEY WOULD YOU LIKE TO FILL OUT?");

        btnSelectAnalyze.setText("Start Analyzing Survey");
        btnSelectAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAnalyzeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblWelcome)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboSurvey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBack))
                        .addGap(84, 84, 84)
                        .addComponent(btnSelectAnalyze)
                        .addGap(30, 30, 30)))
                .addGap(0, 343, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblWelcome)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSurvey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectAnalyze))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(261, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the "Back" button is pressed
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //change the visibility to show the main menu again
        firstWindow.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * When the "Start Analyzing Survey" button is pressed
     */
    private void btnSelectAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAnalyzeActionPerformed
        //Get the survey name from what the user selected from the combo box
        surveyName = cboSurvey.getSelectedItem().toString();

        //Create a new survey
        survey = new Survey();

        //Create a new list of question types
        questionTypeOrder = new ArrayList();

        //Establish the survey object using the survey name
        establishSurveyObject(surveyName);

        //If no AnalyzeSurveyResponse form exists, create a new one
        if (analyzeSurveyWindow == null) {

            //Create the form for analysis from the survey name, the survey, and the list of question types
            analyzeSurveyWindow = new AnalyzeSurveyResponse(surveyName, survey, questionTypeOrder);
        }

        //Change visiblity of forms to link to the next form respective to the user's choice
        analyzeSurveyWindow.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnSelectAnalyzeActionPerformed

    /**
     *
     * @param surveyName - the name of the survey to create into a survey class
     */
    public void establishSurveyObject(String surveyName) {
        try {
            //Set the reader to the corect file that will read the survey
            String filePath = "src\\finalproject\\tang\\chen\\" + surveyName;
            FileReader fr = new FileReader(filePath);
            BufferedReader br = new BufferedReader(fr);

            //The end of the file has not yet been reached
            boolean eof = false;

            String typeQuestion, question, responses;

            //While the end of the file has not yet been reached...
            while (!eof) {

                //Read a line for the type of question
                typeQuestion = br.readLine();

                //If the line that is read is empty...
                if (typeQuestion == null) {

                    //The end of the file is reached
                    eof = true;

                } else {
                    //Otherwise, create a new question
                    Question newQuestion;

                    //Create a list to store possible survey answers
                    ArrayList<String> choices = new ArrayList();

                    //Read the next two lines for the actual question to prompt responders 
                    //and the range of answers the user can select 
                    question = br.readLine();
                    responses = br.readLine();

                    //Based on the question type, execute respective code to create the question
                    if (typeQuestion.equals("Single Response Multiple Choice")) {
                        
                        //Seperate the different reponses in the line that gives the possible answers to be selected
                        String responseList[] = responses.split(", ");
                        
                        //For the given possible answers
                        for (int i = 0; i < responseList.length; i++) {
                            
                            //if any of the answers are blank, do not add them to the possible selected choices
                            if (!responseList[i].equals(" ") || !responseList[i].equals("  ")) {
                                
                                //Add the possible answer to the choices list
                                choices.add(responseList[i]);
                            }
                        }
                        
                        //create the new Single MC question
                        newQuestion = new SingleMC(question, choices);

                    } else if (typeQuestion.equals("Multiple Response Multiple Choice")) {
                        
                        //Seperate the different reponses in the line that gives the possible answers to be selected
                        String responseList[] = responses.split(", ");
                        
                        //For the given possible answers
                        for (int i = 0; i < responseList.length; i++) {
                            
                            //if any of the answers are blank, do not add them to the possible selected choices
                            if (!responseList[i].equals(" ") || !responseList[i].equals("  ")) {
                                
                                //Add the possible answer to the choices list
                                choices.add(responseList[i]);
                            }
                        }
                        
                        //create the new Multiple MC question
                        newQuestion = new MultipleMC(question, choices);

                    } else {
                        //Short Answer
                        
                        //Create the new Short Answer question
                        newQuestion = new ShortAnswer(question);
                    }
                    
                    //Add the type of question to the new question
                    newQuestion.setType(typeQuestion);
                    
                    //Append the type to the list keeping track of the type order
                    questionTypeOrder.add(typeQuestion);
                    
                    //Add the created question to the created survey object
                    survey.getSurveyQuestions().add(newQuestion);
                }
            }
        } catch (IOException e) {
            System.out.println("ERROR " + e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSelectAnalyze;
    private javax.swing.JComboBox cboSurvey;
    private javax.swing.JLabel lblWelcome;
    // End of variables declaration//GEN-END:variables
}
